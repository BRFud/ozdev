*Include macros.inc

newline_width equ 6
newline_char equ 13
        psect   beforebss

_line_buf: defs 125

        global  ScrCharSet,_ozputsf ;; no system calls
        global  __ozmodel,_ozdetectmodel
        global _line_buf,_myfont,_ozsave_pagenum

myfont:
        ld      hl,(_ozsave_pagenum)
        ld      a,l
        out     (3),a
        ld      a,h
        out     (4),a
        ld      hl,0b000h-32*3
        ld      (font_len_offset),hl
        ld      hl,0b000h
        ld      (font_offset),hl
        ld      e,10
        jr      setlength
DoInit:
        ld      a,1
        ld      (init),a
        ld      a,(__ozmodel)
        xor     0ffh
        call    z,_ozdetectmodel
        ld      a,(__ozmodel)
        and     4
        jr      z,DidInit  ;; not multilingual, so all is OK
        ld      a,1eh
        ld      (LowerFontPage1),a
;        ld      (LowerFontPage2),a
;        inc     a
;        ld      (HigherFontPage1),a
;        ld      (HigherFontPage2),a
        jr      DidInit

; void ozputsf(int y);
_ozputsf:
        ld      a,(init)
        or      a
        jr      z,DoInit
DidInit:
        push    iy
	ld	iy,2
	add	iy,sp
	push	ix

        ld      a,0
_myfont equ $-1
        or      a
        jr      nz,myfont

        ld      a,0eh
LowerFontPage1  equ $-1
        ld      (font_page),a
        ld      hl,0a000h
        ld      e,8
        ld      a,0  ;; self-mod
font_page equ $-1
        out     (3),a
        xor     a
        out     (4),a

        ld      (font_len_offset),hl
        ld      bc,310h
        add     hl,bc
        ld      (font_offset),hl

setlength:
        ld      a,e
        ld      (height),a
        ld      (height_clear),a


        ld      hl,400h-4

        ld      c,1
        out     (c),l
        inc     c
        out     (c),h  ;; page in screen



        ld      l,(iy+2)
        ld      h,0
	add	hl,hl
	ld	c,l
	ld	b,h	 ; bc=2*y
	add	hl,hl	 ; hl=4*y
	add	hl,hl	 ; hl=8*y
	add	hl,hl	 ; hl=16*y
	add	hl,hl	 ; hl=32*y
	sbc	hl,bc	 ; hl=30*y

        ld      bc,08000h
        add     hl,bc

	push	hl
	pop	ix	 ; ix=screen-offset for y

        ld      a,0   ;; first column already done
        call    ClearColumn0

        ld      bc,0     ; x position
        ld      de,_line_buf

DoPrintLoop:
        ld      a,(de)       ;; get character from string
	or	a
        jp      z,done

        push    de           ;; string pointer
        push    bc           ;; x-pos

	ld	hl,0000h     ;; self modifying code
font_len_offset equ $-2
	ld	c,a
	ld	b,0
	add	hl,bc
	add	hl,bc
        add     hl,bc

;; now hl=width, iy=character record position
DoPrintChar:

	push	hl
        pop     iy           ;; iy=font character record position

	ld	a,(hl)	; width
        ld      l,a
        ld      h,b     ; h=0 as b=0 still


        pop     bc      ; x-position
	push	bc

        ld      e,c
        add     hl,bc
        ld      (EndXPos),hl

        ld      a,e     ; low byte of x-position
        and     7
        ld      e,a
        add     a,a
        add     a,e

        ld      e,a
        ld      d,0

        ld      hl,NoRotation
        sbc     hl,de
        ld      (RotateBarrelLoc),hl

	ld	l,(iy+1)  ;; font position
	ld	h,(iy+2)
	ld	bc,0000h  ;; self-modifying code
font_offset equ $-2	  ;;
        add     hl,bc     ;; hl=position of font data for character

	push	hl
	pop	iy	  ;; iy=font data pointer

	pop	bc	  ;; x-position of start

        srl     c
        srl     c
        srl     c
	ld	b,0
	push	ix
	pop	hl	  ;; hl=screen position
	add	hl,bc

        inc     hl
        ld      a,c
        inc     a
        cp      30
        call    c,ClearColumn
        dec     hl

	ld	c,00  ;; character row counter (self-modifying)
height equ $-1	      ;;

InnerCharLoop:
        ld      e,0
        ld      a,(iy)

        jp      0000
RotateBarrelLoc equ $-2

        rla
        rl      e

        rla
        rl      e

        rla
        rl      e

        rla
        rl      e

        rla
        rl      e

        rla
        rl      e

        rla
        rl      e

NoRotation:
        or      (hl) ;; get from screen
	ld	(hl),a
	inc	hl
        ld      a,(hl)
        or      e
        ld      (hl),a
	ld	de,29
	add	hl,de
	inc	iy
	dec	c
	jp	nz,InnerCharLoop

EndOfCharPut:
	ld	bc,0000     ;; self-modifying code
EndXPos equ $-2 	    ;;

	pop	de
	inc	de

        jp      DoPrintLoop

done:
        push    ix
        pop     hl          ;; Position

        ld      a,(already_did)
        inc     a
        ld      c,a

        add     hl,bc

FinalClearTop:
        cp      30
        jp      nc,cleanup_page
        call    ClearColumn
        inc     hl
        inc     a
        jp      FinalClearTop

cleanup_page:
	pop	ix
	pop	iy

        ld      a,7
        out     (3),a
        ld      a,6-4
        out     (1),a
        ld      a,4
        out     (2),a
        out     (4),a

	ret

DonePop2:
        pop     hl  ; x position
        pop     de
        jr      cleanup_page

ClearColumn:
        cp      0
already_did equ $-1
        ret     z
        ret     c
ClearColumn0:
        ld      (already_did),a
        ex      af,af'
        push    hl
        ld      de,30
        ld      b,0
height_clear equ $-1
        xor     a
CCTop:
        ld      (hl),a
        add     hl,de
        djnz    CCTop

        pop     hl
        ex      af,af'
        ret

;Masks:  defb 1,3,7,15,31,63,127,255
init:   defb 0

;_line_buf:
;        defm 'H'
;        defb 0
;_check: defw 0
;global _check

global set_a000_400,_scrollbar_pos,_bar,_unbar,restore_a000
        psect lowpage

doset:
        ld    hl,(_scrollbar_pos)
        call  set_a000_400
        ld    b,3
        ld    de,30
        ret

_bar:
        call  doset
bar_top:
        ld    a,(hl)
        or    80h
        ld    (hl),a
        add   hl,de
        djnz  bar_top
        jp    restore_a000

_unbar:
        call  doset
bar_top2:
        ld    a,(hl)
        and   7fh
        ld    (hl),a
        add   hl,de
        djnz  bar_top2
        jp    restore_a000

