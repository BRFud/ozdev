# 1 "p:ozc.c"








































static char	keep,
		keepas,
		verbose,
		optimize,
		speed,
		reloc,
		xref,
        wiz,
		nolocal;

static char *	iuds[60		],
	    *	objs[60		],
	    *	flgs[120		],
	    *	libs[60		],
	    *	c_as[60		];

static uchar	iud_idx,
		obj_idx,
		flg_idx,
		lib_idx,
		c_as_idx;
static char *	paths[] =
{
	"LINK",
	"OBJTOHEX",
	"CGEN",
	"OPTIM",
	"CPP",
	"ZAS",
	"LIB",
	"P1",
	"CRTCPM.OBJ",
	"$EXEC",
	"CREF",
};















static char *	temps[] =
{
	"$CTMP1.$$$",
	"$CTMP2.$$$",
	"$CTMP3.$$$",
	"$CTMP4.$$$",
	"L.OBJ",
	"$$EXEC.$$$",
	"CREF.TMP",
};









static char *	cppdef[] = { "-DCPM", "-DHI_TECH_C", "-Dz80" };
static char *	cpppath = "-I";


static char	tmpbuf[128];
static char	single[40];
static short	nfiles;
static char *	outfile;
static FILE *	cmdfile;
static short	plen;
static char	ebuf[22];
static char *	xrname;
static struct stat	statbuf;

extern char *	malloc(),
	    *	getenv(),
	    *	fcbname(),
	    *	rindex(),
	    *	strcat(),
	    *	strcpy();
extern char **	_getargs();
extern int	strlen(),
		strcmp(),
		dup();

static char *	xalloc();

main(argc, argv)
char **	argv;
{
	register char *	cp, * xp;
	short		i;

	fprintf(stderr, "HI-TECH C COMPILER (CP/M-80) V3.09\n");
	fprintf(stderr, "Copyright (C) 1984-87 HI-TECH SOFTWARE\n");
# 147 "p:ozc.c"

	if(argc == 1)
		argv = _getargs((char *)0, "c");
	setup();
	while(*++argv) {
		if((argv)[0][0] == '-') {
			if(islower(i = argv[0][1]))
				argv[0][1] = i = toupper(i);
			switch(i) {

			case 'A':
				reloc = 1;
				paths[8][plen] = 'R';
				flgs[flg_idx++] = "-L";
				break;

			case 'R':
				flgs[flg_idx++] = 	"-U__getargs";
				break;

			case 'V':
				verbose = 1;
				break;

			case 'S':
				keepas = 1;

			case 'C':
				if(argv[0][2] == 'r' || argv[0][2] == 'R') {
					xref = 1;
					if(argv[0][3]) {
						xrname = &argv[0][1];
						xrname[0] = '-';
						xrname[1] = 'o';
					} else
						xrname = (char *)0;
				} else
					keep = 1;
				break;

			case 'O':
				optimize = 1;
				break;

			case 'I':
			case 'U':
			case 'D':
				iuds[iud_idx++] = argv[0];
				break;

			case 'L':
				addlib(&argv[0][2]);
				break;

			case 'F':
				argv[0][1] = 'D';
				flgs[flg_idx++] = argv[0];
				break;

            case 'T':
                optimize = speed = 1;
                break;

            case 'Z':
                wiz=1;
                break;

			case 'X':
				nolocal = 1;

			case 'P':
			case 'M':
			case 'W':
				flgs[flg_idx++] = argv[0];
				break;

			default:
				fprintf(stderr, "Unknown flag %s\n", argv[0]);
				exit(1);
			}
			continue;
		}
		nfiles++;
		cp = argv[0];
		while(*cp) {
			if(islower(*cp))
				*cp = toupper(*cp);
			cp++;
		}
		cp = rindex(argv[0], '.');
		if(cp && (strcmp(cp, ".C") == 0 || strcmp(cp, ".AS") == 0)) {
			c_as[c_as_idx++] = argv[0];
			if(xp = rindex(argv[0], ':'))
				xp++;
			else
				xp = argv[0];
			*cp = 0;
			strcat(strcpy(tmpbuf, xp), ".OBJ");
			addobj(tmpbuf);
			strcpy(single, tmpbuf);
			*cp = '.';
		} else
			addobj(argv[0]);
	}
	doit();
}

setup()
{
	register char *	cp;
	short		i, len;

	if(!(cp = getenv("HITECH")))
		if(stat("P1.COM", &statbuf) >= 0)
			cp = "";
		else
			cp = "0:A:";
	plen = strlen(cp);
	cpppath = strcat(strcpy(xalloc(plen+strlen(cpppath)+1), cpppath), cp);
	for(i = 0 ; i < sizeof paths/sizeof paths[0] ; i++)
		paths[i] = strcat(strcpy(xalloc(plen+strlen(paths[i])+1), cp), paths[i]);
	if(cp = getenv("TMP")) {
		len = strlen(cp);
		for(i = 0 ; i < sizeof temps/sizeof temps[0] ; i++)
			temps[i] = strcat(strcpy(xalloc(len+strlen(temps[i])+1), cp), temps[i]);
	}
	if(strcmp(fcbname(fileno(stdout)), "CON:")) {
		strcat(strcpy(ebuf, "-E"), fcbname(fileno(stdout)));
		close(fileno(stdout));
		stdout->_file = dup(fileno(stderr));
	}
	objs[0] = paths[8];
	obj_idx = 1;
	flgs[0] = 	"-Z";
	flg_idx = 1;
	for(i = 0 ; i < sizeof cppdef/sizeof cppdef[0] ; i++)
		iuds[i] = cppdef[i];
	iud_idx = i;
}

doit()
{
	register char *	cp;
	register uchar	i;

	if(xref)
		close(creat(temps[6], 0600));
	iuds[iud_idx++] = cpppath;
	if(!(cmdfile = fopen(temps[5], "wb")))
		error("Can't create temporary file %s", temps[5]);
	put_cmd(SKP_ERR);
	if(verbose)
		put_cmd(ECHO);
	for(i = 0 ; i < c_as_idx ; i++) {
		cp = rindex(c_as[i], '.');
		if(strcmp(cp, ".C") == 0)
			compile(c_as[i]);
		else
			assemble(c_as[i]);
		put_cmd(TRAP);
	}
	rm(RM_FILE, temps[0]);
	rm(RM_FILE, temps[1]);
	rm(RM_FILE, temps[2]);
	if(!keep) {
        flgs[flg_idx++] = wiz?"-Plowpage=8000h,midpage,text,data,bss":"-Ptext=0,data,bss";
		if(reloc)
			flgs[flg_idx++] = strcat(strcpy(xalloc(strlen(temps[4])+3), "-o"), temps[4]);
		else {
            flgs[flg_idx++] = wiz?"-C8000h":"-C100H";
			flgs[flg_idx++] = strcat(strcpy(xalloc(strlen(outfile)+3), "-O"), outfile);
		}
        if(wiz)
            flgs[flg_idx++] = "32k.obj";
		for(i = 0 ; i < obj_idx ; i++)
			flgs[flg_idx++] = objs[i];
        if(wiz)
        {
            addlib("OZ");
            addlib("C0");
            addlib("OZ");
            addlib("C0");
        }
        else addlib(	"C");

		for(i = 0 ; i < lib_idx ; i++)
			flgs[flg_idx++] = libs[i];
		flgs[flg_idx] = 0;
		put_cmd(IF_NERR);
		doexec(paths[0], flgs);
		if(reloc) {
			flgs[0] = "-R";
			flgs[1] = "-B100H";
			flgs[2] = temps[4];
			flgs[3] = outfile;
			flgs[4] = (char *)0;
			doexec(paths[1], flgs);
			rm(RM_FILE, temps[4]);
		}
		if(c_as_idx == 1 && nfiles == 1)
			rm(RM_FILE, single);
	}
	if(xref)
		if(xrname) {
			flgs[0] = xrname;
			strcat(strcpy(tmpbuf, "-h"), outfile);
			if(cp = rindex(tmpbuf, '.'))
				strcpy(cp, ".CRF");
			else
				strcat(tmpbuf, ".CRF");
			flgs[1] = tmpbuf;
			flgs[2] = temps[6];
			flgs[3] = 0;
			put_cmd(IF_NERR);
			doexec(paths[10], flgs);
			rm(RM_FILE, temps[6]);
		} else {
			sprintf(tmpbuf, "Cross reference info left in %s: run CREF to produce listing\n", temps[6]);
			print(tmpbuf);
		}
	put_cmd(TRAP);
	rm(RM_EXIT, temps[5]);
	fclose(cmdfile);
	fclose(stdout);
	fclose(stdin);
	setfcb(((struct fcb *)0x5C), temps[5]);
	execl(paths[9], paths[9], temps[5], (char *)0);
	error("Can't execute %s", paths[9]);
}

rm(type, file)
char *	file;
{
	char	buf[40];

	if(verbose) {
		strcat(strcpy(buf, "ERA "), file);
		print(buf);
	}
	setfcb(((struct fcb *)0x5C), file);
	putc(type, cmdfile);
	putc(16, cmdfile);
	fwrite(((struct fcb *)0x5C), 1, 16, cmdfile);
}

print(s)
char *	s;
{
	putc(PRINT, cmdfile);
	putc(strlen(s), cmdfile);
	fputs(s, cmdfile);
}

put_cmd(i)
{
	putc(i, cmdfile);
	putc(0, cmdfile);
}

addobj(s)
char *	s;
{
	char *	cp;
	uchar	len;
	static char	oname;

	if(oname == 0) {
		oname = 1;
		if(cp = rindex(s, '.'))
			len = cp - s;
		else
			len = strlen(s);
		cp = xalloc(len + strlen("-O.COM") + 1);
		strncat(strcpy(cp, "-O"), s, len);
        strcpy(cp+len+2, wiz?".BIN":".COM");
		outfile = cp+2;
	}
	cp = xalloc(strlen(s)+1);
	strcpy(cp, s);
	objs[obj_idx++] = cp;
}

addlib(s)
char *	s;
{
	char *	cp;

	strcpy(tmpbuf, paths[6]);
	strcat(strcat(tmpbuf, s), ".LIB"		);
	cp = xalloc(strlen(tmpbuf)+1);
	strcpy(cp, tmpbuf);
	libs[lib_idx++] = cp;
}

error(s, a)
char *	s;
{
	fprintf(stderr, s, a);
	exit(1);
}

static char *
xalloc(s)
short	s;
{
	register char *	cp;

	if(!(cp = malloc(s)))
		error("Out of memory");
	return cp;
}

upcase(s)
register char *	s;
{
	while(*s) {
		if(*s >= 'a' && *s <= 'z')
			*s -= 'a'-'A';
		s++;
	}
}

doexec(name, vec)
char *	name;
char **	vec;
{
	uchar	len;
	char **	pvec;
	char *	redir[2];
	char	redbuf[20];
	FILE *	cfile;
	static short	redno;
	char	xbuf[130];

	pvec = vec;
	len = 0;
	redbuf[0] = 0;
	while(*pvec)
		len += strlen(*pvec++)+1;
	if(len > 124) {
		sprintf(xbuf, temps[3], ++redno);
		if(!(cfile = fopen(xbuf, "w")))
			error("Can't create %s", xbuf);
		len = 0;
		while(*vec) {
			len += strlen(*vec);
			fprintf(cfile, "%s ", *vec++);
			if(len > 126) {
				len = 0;
				fprintf(cfile, "\\\n");
			}
		}
		fputc('\n', cfile);
		fclose(cfile);
		redir[1] = (char *)0;
		sprintf(redbuf, "<%s", xbuf);
		redir[0] = redbuf;
		vec = redir;
	}
	xbuf[0] = 0;
	while(*vec)
		strcat(strcat(xbuf, " "), *vec++);
	len = strlen(xbuf);
	putc(EXEC, cmdfile);
	putc(len+50, cmdfile);
	setfcb(((struct fcb *)0x5C), name);
	strcpy(((struct fcb *)0x5C)->ft, "COM");
	((struct fcb *)0x5C)->nr = 0;
	putc(((struct fcb *)0x5C)->uid, cmdfile);
	fwrite(((struct fcb *)0x5C), 1, 16, cmdfile);
	setfcb(((struct fcb *)0x5C), &xbuf[1]);
	((struct fcb *)0x5C)->nr = 0;
	fwrite(((struct fcb *)0x5C), 1, 32, cmdfile);
	putc(len, cmdfile);
	fwrite(xbuf, 1, len, cmdfile);
	if(redbuf[0])
		rm(RM_FILE, &redbuf[1]);
}

assemble(s)
char *	s;
{
	char *	vec[5];
	char	buf[80];
	char *	cp;
	uchar	i;

	if(c_as_idx > 1)
		print(s);
	i = 0;
	if(optimize && !speed)
		vec[i++] = "-J";
	if(nolocal)
		vec[i++] = "-X";
	if(cp = rindex(s, ':'))
		cp++;
	else
		cp = s;
	strcat(strcpy(buf, "-O"), cp);
	if(rindex(buf, '.'))
		*rindex(buf, '.') = 0;
	strcat(buf, ".OBJ");
	vec[i++] = buf;
	vec[i++] = s;
	vec[i] = (char *)0;
	doexec(paths[5], vec);
}

compile(s)
char *	s;
{
	register char *	cp;
	uchar	i, j;
	char *	vec[60		];
	char	cbuf[50];

	if(c_as_idx > 1)
		print(s);
	for(j = 0; j < iud_idx ; j++)
		vec[j] = iuds[j];
	vec[j++] = s;
	vec[j++] = temps[0];
	vec[j] = (char *)0;
	doexec(paths[4], vec);
	if(cp = rindex(s, ':'))
		s = cp+1;
	*rindex(s, '.') = 0;
	i = 0;
	if(keepas && !optimize)
		vec[i++] = "-S";
	if(xref)
		vec[i++] = strcat(strcpy(cbuf, "-c"), temps[6]);
	if(ebuf[0])
		vec[i++] = ebuf;
	vec[i++] = temps[0];
	vec[i++] = temps[1];
	vec[i++] = temps[2];
	vec[i++] = (char *)0;
	doexec(paths[7], vec);
	vec[0] = temps[1];
	vec[1] = keepas && !optimize ? strcat(strcpy(tmpbuf, s), ".AS") : temps[0];
	vec[2] = (char *)0;
	doexec(paths[2], vec);
	if(keepas && !optimize)
		return;
	cp = temps[0];
	if(optimize) {
		i = 0;
		if(speed)
			vec[i++] = "-F";
		vec[i++] = temps[0];
		if(keepas)
			vec[i++] = strcat(strcpy(tmpbuf, s), ".AS");
		else
			vec[i++] = temps[1];
		vec[i] = (char *)0;
		doexec(paths[3], vec);
		if(keepas)
			return;
		cp = temps[1];
	}
	i = 0;
	if(nolocal)
		vec[i++] = "-X";
	if(optimize && !speed)
		vec[i++] = "-J";
	vec[i++] = "-N";
	vec[i++] = strcat(strcat(strcpy(tmpbuf, "-o"), s), ".OBJ");
	vec[i++] = cp;
	vec[i] = (char *)0;
	doexec(paths[5], vec);
}
