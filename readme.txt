OZ-7xx C-Based Development Kit (SDK)

LEGAL AGREEMENT AND INFORMATION:

0 The files in this kit constitute a mere aggregation and not a
  derivative work, and thus "compilation copyright" is NOT asserted.
  Different files in the kit are under different copyright restrictions
  which need to be noted and are described below.  Alexander R. Pruss and
  distributors of this package assume no responsibility for any items
  included for your convenience.

1 By using anything, whether code, information, binaries, example
  programs, or anything else, you are agreeing not to hold any persons
  who contributed to this kit responsible for any damage to hardware,
  software, data or anything at all that might result.  No warranties
  are offered.  You are hereby warned that it IS possible to damage your
  OZ-7xx with assembly / C programs, quite possibly even permanently.
  You should know what you are doing when you use this stuff.  

2 The HI-TECH Z80 CP/M C compiler V3.09 (including the library source in
  LIBSRC\) is provided free of charge for any use, private or
  commercial, strictly as-is. No warranty or product support is offered
  or implied. You may use the compiler for whatever you like, providing
  you acknowledge that the copyright to this software remains with
  HI-TECH Software (NOTE: Some library source in LIBSRC\ has been
  modified by Alexander R. Pruss, and some of it has been moved to the
  LIBOZ directory in modified form.)

3 The sample Wizard programs and liboz library source are, except where
  marked otherwise, copyright (c) 2000-2002 Alexander R. Pruss.  The zcc
  shell is copyright (c) 2002 Lawrence Chitty.

4 You can use the programs and code for whatever purposes compatible
  with morality and law you wish, but in any redistribution of modified
  or unmodified versions of the sample programs (a) you must acknowledge
  the copyright for the original code as remaining with Alexander R.
  Pruss, (b) you must require of any users that they agree not to hold
  Alexander R. Pruss and/or any other contributors responsible for any
  damages, (c) you must warn users of possible dangers associated with
  C/assembly programs on the Wizard, and (d) you must first ask
  Alexander R. Pruss (e-mail: arpruss@gmail.com) for permission to
  redistribute (which is almost certain to be granted, though in
  commercial cases perhaps for a fee). If in doubt, ask.
  
NOTE ADDED IN 2015: All code that was previously copyright (c) Alexander R. Pruss
can now be used under the terms of the MIT License. - Alexander Pruss

5 Programs liked with the liboz library can be distributed for any
  purposes (commercial or not) whatsoever compatible with morality and
  legality, as long as (a) you warn users of possible dangers associated
  with C/assembly programs, (b) you ensure that the licensing of your
  programs is such that no responsibility for any damages caused by the
  programs or the library code lies with Alexander R. Pruss or with any
  other contributors to the liboz library, and (c):
        If (and only if) you use any of the read*() or write*()
        functions and publically release your program, you MUST apply to
        Alexander R. Pruss (arpruss@gmail.com) for an owner ID for
        your program and you MUST link an owner ID into your program
        with makewzd or equivalent.  For in-house testing, you may use
        the ID of 65535, but not for public release.  Owner IDs will be
        granted free of charge.  Specify what programs you plan to write
        and how many IDs you'd like (you can get up to ten each time you
        apply). It is illegal to use either an owner ID not assigned to
        you or the ID of 65535 for publically released programs.  A
        program counts as publically released if it is posted in a
        publically available way (e.g., a web site) or sold to the
        public.
        There is, however, one exception to this rule.  If you write a
        program that processes files generated by other applications
        which duly have owner IDs assigned, e.g., a program that reads
        font files, or a file manager, or a multi-purpose binary file
        viewer, you do not need to apply for an owner ID.

NOTE ADDED IN 2015: I wish I could simply replace this condition with a standard
open source license, but that would require contacting all the authors and some
were uncontactable when I last tried. So, sadly, I need to keep this requirement.

6 The SDK as a whole may be redistributed only by permission of
  Alexander R. Pruss (in virtue of the copyright of the Alexander R. Pruss
  copyrighted components, NOT in virtue of any compilation copyright, there
  not being such for the package as a whole), though obviously those
  portions licensed, e.g., under the Gnu Public License can be
  distributed under the terms of that license since the package as a
  whole is a mere aggregate and compilation copyright has not been
  asserted.

NOTE ADDED IN 2015: I hereby grant this permission to everyone, subject to the conditions
of the constituent licenses. - Alexander Pruss

7 The CLOCK package is under the Gnu Public License.  The Hebrew font
  may be under the Gnu Public License, too.

8 Multi-Z80 CPU emulator at the heart of zxcc is by Neil Bradley
  (neil@synthcom.com).

9 ZXCC is by John Elliott.

10 IRREL, typically called by ZCC, is Copyright 2002, Prentice Hall, see
   <http://www.cs.vu.nl/pub/minix/LICENSE>.

11 ARCHESS is Copyright 1992 Carey Bloodworth.  See CHESS\README.TXT

12 Copyright and special licensing information if applicable is available
   in the README.TXT files for each of the sample fonts in FONTS\SAMPLES.

13 The OZPACK package is by Lawrence Chitty.  See the licensing provisions
   in DOCS\LIBOZ.TXT

14 A number of the items included such as ozpack.exe and zx*.exe use djgpp
   and its version of a Gnu library.  The license for djgpp requires that
   you be informed of where you can get the latest versions of djgpp, and
   if you redistribute these items, you need to inform those to whom you
   redistribute these items.  The answer to the "where" question is simple:
   http://www.delorie.com/djgpp/

PAYMENT:
  No payment is required for any software included.  If you find the
  viewweek or memoedit programs useful, you are encouraged but not
  required to donate $5 or $8 (respectively) to a pro-life organization.

INSTALLATION NOTES:
  Preserve the directory structure when installing and add BIN to your
  path.  It is recommended you unzip (with whatever option your unzip
  program requires to protect directory structures) the development kit
  in c:\progra~1\wiz\hitech.  Source code for zxcc is provided in
  zxcc.zip.

  Put files=100 in your config.sys file.

  Some of the programs require a MAKE to compile.  I use Borland's MAKE
  from their free Borland C package
  (http://www.inprise.com/bcppbuilder/freecompiler/).

COMPILING A SAMPLE PROGRAM:
  Create hello.c containing:
        #include <oz.h>
        main()
        {
          ozputs(10,0,"Hello world!");  /* put "Hello world!" at 10,0 */
          ozgetch(); /* wait for key press */
        }
  Then run:
        zcc -z hello.c
  to create hello.obj.  To include the floating point library when
  linking, use -lf on the command-line.  Add -ox on the command-line for
  complete optimization.

  Note that if your program uses inline assembly, it's best if you don't
  optimization (though -o1 might be fine) and you should set the -p flag
  in zcc.  For more information on how to use zcc to compile things, see
  to docs\zcc.txt

COMPRESSING PROGRAMS:
  Once you have a .wzd program file created, you can compress it with Lawrence
  Chitty's OZPACK program.  Just do:
        ozpack filename.wzd
  This will make a self-decompressing program, which will simply take a
  little extra time (less than a second in my experience) to start up.  The
  program will use just as much SRAM, but one can also pre-load data into
  the auxiliary memory, screen memory and font memory if one wishes in this
  way.  Also, very usefully, the program takes up less flash on 7xxM models
  then, and likewise less flash when saved via Loader.  What is useful for
  development is that the program will upload faster to your organizer.
  Finally, it'll be harder for a hacker to modify your program.

  See DOCS\OZPACK.TXT for more information.

INCLUDED STUFF:
  LIBSRC\   : Source code for the Hi-Tech standard C library
  DOCS\     : Useful documentation
  LIBOZ\    : Source code for Wizard library
  3D\       : Source code for 3D library
  MISC\     : Miscellaneous stuff.  Mainly unfinished or dangerous.
  COMPILER\ : Libraries, and CP/M-80 executables.  DO NOT RUN ANY .COM
              PROGRAMS FROM THE BIN DIRECTORY OUTSIDE OF ZXCC OR SOME
              OTHER CP/M-80 EMULATOR.
  BIN\      : DOS/Windows executables
  BIN\SRC   : Source for DOS/Windows executables
  WizTris\  : A Tetris clone.  To create, do:
        make
  WizTerm\  : A terminal emulator.  To create, do:
        make
  Etc.


NOTES:
1. All library and object files whose directories are not specified
   should be in the current directory or in the COMPILER\ directory.
2. The compiler, linker, librarian and assembler are all running under
   the zxcc CP/M emulator.  This probably means that filenames shouldn't
   exceed the CP/M limit of 8 characters.  See docs\zxcc.htm for
   documentation on zxcc.
3. If compiling a large project you may want to look at the .map file
   generated by ozlink.  You need to check two things:
      (a) The total size for all sections, including bss which is not
          part of the .bin file, does not exceed 32k
      (b) The size of the lowpage section does not exceed 8k (this
          should be automatic with the present library given how tiny it
          is, but as the library grows, this could be nontrivial).
      (c) Generally the linker will complain about the size of __Hbss
          if the program is too big, though if you need a very large
          stack, this complaint will not be good enough for you.
4. If you add anything to or change anything in the library, let
   Alexander Pruss <pruss@imap.pitt.edu> know.
5. If you don't have a Windows C compiler but want to compile stuff like
   makewzd.c, you can always use Hi-Tech.  Just run:
      zxc -o makewzd.c
   And then you can execute makewzd.com under the CP/M emulator:
      zxcc makewzd.com <args>.
6. If you try to run any CP/M .com files under DOS/Windows, your system
   will crash/hang.
7. Directories like wizterm\ contain various projects-in-development.
   There is no guarantee they will work.  It is good to have a MAKE
   program to handle these projects.  The MAKE program I recommend is
   the one included with Borland's free C compiler distribution:
   http://www.inprise.com/bcppbuilder/freecompiler/.
   Once you have MAKE, you can compile wizterm by just going to the
   WIZTERM directory and typing MAKE.
8. Standard C file/stdio i/o, time-handling and other routines will not work
   and may crash/damage the Wizard.  sprintf(), though, does work.
   Currently, printf(), putchar() and puts() are being made to work.
   Just don't use floating point with printf() (with sprintf() it's OK)
9.Any alarms that go off during a program will be ignored.
10.The Hi-Tech C compiler has a bug.  If you cast a float to a static
   byte-length variable (byte, unsigned char, or char), the code will
   not work.  Thus:
        static byte x;
        float f;
        ...
        x=(byte)f;
   does not work properly.  One workaround: Use a non-static variable for x
   or make x an unsigned int.  NOTE: It's been reported to me that there
   is trouble even with non-static byte variables.  If so, then you'll
   first have to put the float value into an int-length variable, and
   then into a byte-length one.  Another floating point bug is that things
   will go wrong if floating point constants have too many digits.  Haven't
   checked what the limit is, but given the low internal precision, there
   is little reason to use more than 8.  While on the subject of floating
   point, there are faster trig routines available in MISC\FTRIG.* and
   MISC\ISIN.*.
11.Unsigned variables are more efficient than signed ones.  Static ones
   are more efficient than non-static.  But see note #10.
13.Some documentation for the library and for other things is found in docs\.
14.You'll find that because the Hi-Tech C compiler runs fairly slowly given
   that it's running under an emulated CP/M setup, you'll want to speed things
   up.  One way to do this is to purchase Hi-Tech Software's commercial
   Hi-Tech C cross-compiler, with which everything should work with minor
   changes.  The other way is to download their free Pacific C compiler for
   DOS, install it in some directory, and get this SDK at least to use the
   Pacific C compiler's linker and librarian.  To do this, you'll use the
   instp batch file.
15.The library function atexit() has an official nine-call limit (ten-call
   if no file i/o functions are used), which probably does not conform to
   ANSI standard.
16.Whenever an error occurs in a floating point routine, the unsigned char
   variable __fperr (declared in math.h) is set to 1.  To check if
   an error occurs in a calculation, set __fperr=0 before the
   calculation, and test it afterwards.  This does NOT check for
   multiplication underflows--those just return 0.0--and for division
   overflows--the results of those are undefined--though it does check
   for things like sqrt(-1.0) or 1.0/0.0.
17.The floating point printf() has a bug in %g format--the .prec modifier
   does not work in the standard way.
18.Various pieces of software for the Sharp 7xx are to be found at
   home.att.net/~apruss
