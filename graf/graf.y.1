/* Infix notation calculator--calc */
%{
union yystype
{
  double x;
  double (*f)(double);
};

#define YYSTYPE union yystype
#include <oz.h>
#include <alloca.h>
#include <math.h>
#include <ctype.h>
#include "graf.h"
#include "graf_inc.c"
%}
/* BISON Declarations */
%token FUN
%token NUM
%token END
%token PI
%left '-' '+'
%left '*' '/'
%left NEG     /* negation */
%right FUN    /* function call */
%right '^'
%left 'x'     /* the variable */
%left 'e'
%left PI
/* grammar */
%%
input:    /* empty string */
	| input line
;
line:   expr END  { done(); }
;
expr:      NUM                { enter_number($$.x); }
	| 'e'                { enter_number(2.718281828459); }
	| PI		     { enter_number(M_PI); }
        | expr '+' expr        { enter_op('+');    }
        | expr '-' expr        { enter_op('-');    }
        | expr '*' expr        { enter_op('*');    }
        | expr '/' expr        { enter_op('/');    }
        | '-' expr  %prec NEG { enter_op('n');    }
	| 'x'                { enter_op('x');    }
        | expr '^' expr        { enter_op('^');    }
        | '(' expr ')'        { ;         }
        | expr expr            { enter_op('*');    }
        | FUN expr  %prec FUN { enter_func($1.f); }
;
%%

static char *ptr;
static char end;
static byte err;

yylex()
{
  static char c;
  static byte i;
  register char *p=ptr;
  if(end) return 0;
  /* skip white space */
  while ((c=*p++)==' ');
  ptr=p;
  /* process numbers   */
  if (c == '.' || isdigit (c))
    {
      yylval.x=atof(p-1);
      while((c=*p) && (isdigit(c) || c=='.' || c=='e' ||
	(p>ptr && p[-1]=='e' && (c=='-' || c=='+')))) p++;
      ptr=p;
      return NUM;
    }
  for(i=0;i<FUNCTION_TABLE_SIZE;i++)
  {
    if(!strncmp(function_table[i].name,p-1,function_table[i].length))
    {
       yylval.f=function_table[i].f;
       ptr=p+function_table[i].length-1;
       return FUN;
    }
  }
  if(!strncmp(p-1,"pi",2))
  {
     ptr=p+2-1;
     return PI;
  }
  ptr=p;
  if (c == 0)
  {
    end=1;
    return END;
  }
  return c;
}

yyerror(s)
char *s;
{
  ozsavescreen();
  err=1;
  ozwarn(s,anykey);
  ozrestorescreen();
}

enter_number(x)
double x;
{
   compiled[num_steps++]='#';
   values[num_values++]=x;
}

enter_op(op)
char op;
{
   if(op!='x')
   {
     if(num_steps>1 && compiled[num_steps-1]=='#' && compiled[num_steps-2]=='#')
     {
	num_steps--;
	num_values--;
	switch(op)
	{
	   case '+':
		values[num_values-1]+=values[num_values]; return;
	   case '-':
		values[num_values-1]-=values[num_values]; return;
	   case '*':
		values[num_values-1]*=values[num_values]; return;
	   case '/':
		values[num_values-1]/=values[num_values]; return;
	   case '^':
		values[num_values-1]=pow(values[num_values-1],values[num_values]);
		return;
	}
	num_steps++;
	num_values++;
     }
     if(op=='n' && num_steps>0 && compiled[num_steps-1]=='#')
     {
	   values[num_values-1]=-values[num_values-1];
	   return;
     }
     if(op=='^' && compiled[num_steps-1]=='#')
     {
       if(values[num_values-1]==2)
       {
	  compiled[num_steps-1]=SQUARE;
	  num_values--;
	  return;
       }
       else if(values[num_values-1]==3)
       {
	  compiled[num_steps-1]=CUBE;
	  num_values--;
	  return;
       }
       else if(values[num_values-1]==-1)
       {
	  compiled[num_steps-1]=RECIPROCAL;
	  num_values--;
	  return;
       }
       else if(values[num_values-1]==-2)
       {
	  compiled[num_steps-1]=RECIPROCAL_SQUARE;
	  num_values--;
	  return;
       }
       else if(values[num_values-1]==.5)
       {
	  num_steps--;
	  num_values--;
	  enter_func(sqrt);
	  return;
       }
     }
   }
   compiled[num_steps++]=op;
}

enter_func(f)
func f;
{
  if(num_steps>0 && compiled[num_steps-1]=='#')
  {
    values[num_values-1]=f(values[num_values-1]);
  }
  else
  {
    compiled[num_steps++]='f';
    functions[num_functions++]=f;
  }
}


double eval(double x)
{
   static byte sp, step, fun, val;
   sp=step=fun=val=0;
   __fperr=0;
   for(;step<num_steps && !__fperr;step++)
   {
      switch(compiled[step])
      {
	 case '#': stack[sp++]=values[val++]; break;
	 case '+': --sp; stack[sp-1]=stack[sp-1]+stack[sp]; break;
	 case '-': --sp; stack[sp-1]=stack[sp-1]-stack[sp]; break;
	 case '*': --sp; stack[sp-1]=stack[sp-1]*stack[sp]; break;
	 case '/': --sp;
		stack[sp-1]=stack[sp-1]/stack[sp];
		break;
	 case '^': --sp; stack[sp-1]=pow(stack[sp-1],stack[sp]); break;
	 case 'n': stack[sp-1]=-stack[sp-1]; break;
	 case CUBE: stack[sp-1]*=stack[sp-1]*stack[sp-1]; break;
	 case SQUARE: stack[sp-1]*=stack[sp-1]; break;
	 case RECIPROCAL:
		stack[sp-1]=1/stack[sp-1]; break;
	 case RECIPROCAL_SQUARE:
		stack[sp-1]=1/(stack[sp-1]*stack[sp-1]); break;
	 case 'x': stack[sp++]=x; break;
	 case 'f': stack[sp-1]=(*(functions[fun++]))(stack[sp-1]); break;
      }
      if(__fperr) return 0;
   }
   if(sp) return stack[sp-1]; else return 0;
}

done(){compiled[num_steps]=0;}

byte compile(char *s)
{
  ptr=s;
  __fperr=end=err=0;
  num_steps=num_values=num_functions=0;
  yyparse();
  if(__fperr)
     yyerror("Arithmetic error");
  return err;
}

byte graph(char *s)
{
  static int x,y0;
  static double y;
  static double x_scale;
  static double y_scale;
  static unsigned k;
  if(compile(s)) return 1;
  x_scale=(x_max-x_min)/238.;
  y_scale=79./(y_max-y_min);
  y0=-1;
  interrupted=0;
  for(x=0;x<239;x++)
  {
     y=(79-floor(.5+y_scale*(eval(x*x_scale+x_min)-y_min)));
     if(y<0 || y>79)
     {
	y0=-1;
	continue;
     }
     if(ozkeyhit())
     {
	k=ozgetch();
	if(k==KEY_BACKLIGHT) oztogglelight();
	else
	if(k=='s') togglesound();
	else
	{
	   interrupted=1;
	   ozungetch(k);
	   getoption();
	   return 0;
	}
     }
     if(__fperr)
     {
       y0=-1;
     }
     else
     {
       if(y0>=0 && (y0-y>1 || y-y0>1)) _ozline(x-1,y0,x,(int)y,1);
	 else _ozpoint(x,(int)y,1);
       y0=(int)y;
     }
  }
  return 0;
}

unsigned flash(int x,int y)
{
  static byte state;
  static unsigned k;
  state=1;
  do
  {
     ozline(x-2,y,x+2,y,state);
     ozline(x,y-2,x,y+2,state);
     ozpoint(x,y,!state);
     state=!state;
  }
  while(!(k=ozkeydelay64hz(16)));
  return k;
}

void trace(char *s)
{
  static int x0,y0;
  static unsigned k;
  static double x,y;
  static double x_scale;
  static double y_scale;
  static byte is2nd;
  if(compile(s)) return;
  is2nd=0;
  x_scale=(x_max-x_min)/238.;
  y_scale=79./(y_max-y_min);
  y0=-1;
  x0=0;
  while(1)
  {
     x=(x0*x_scale+x_min);
     y=eval(x);
     y0=(int)(79-floor(.5+y_scale*(y-y_min)));
     ozsavescreen();
     if(__fperr) sprintf(miscstring,"(%g,error)",x,y);
	else sprintf(miscstring,"(%g,%g)",x,y);
     ozputs(0,0,miscstring);
     if(__fperr) k=ozgetch();
     else
	k=flash(x0,y0);
     ozrestorescreen();
     switch(k)
     {
	case KEY_MYPROGRAMS:
	case KEY_MAIN:
	case KEY_SCHEDULE:
	case KEY_TELEPHONE:
	case KEY_MEMO:
		ozexitto(k);
	case 's':
		togglesound();
		break;
	case KEY_BACKLIGHT:
		oztogglelight();
		break;
	case KEY_LEFT:
		       if(x0>0) x0--;
		       break;
	case KEY_RIGHT:
		       if(x0<238) x0++;
		       break;
	case KEY_PAGEDOWN:
		       x0+=40;
		       if(x0>238) x0=238;
		       break;
	case KEY_PAGEUP:
		       x0-=40;
		       if(x0<0) x0=0;
		       break;
	case KEY_LEFT|MASK2ND: x0=0; break;
	case KEY_RIGHT|MASK2ND: x0=238; break;
	case KEY_LOWER_ENTER:
	case KEY_UPPER_ENTER:
	case KEY_RETURN:
	case KEY_LOWER_ESC:
	case KEY_UPPER_ESC:
		return;
	default:
		ozungetch(k);
		getoption();
		if(do_special>=0) return;
     }
  }
}

